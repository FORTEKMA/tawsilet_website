name: Build and Deploy sheelni-front

env:
  BUILD_NUMBER: "latest"

on:
  push:
    branches:
      - develop # Adjust based on your deployment branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub (or your preferred registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.REPOSITORY_NAME }}:${{ env.BUILD_NUMBER }} --build-arg REACT_APP_GOOGLE_MAPS_API_KEY=${{ vars.REACT_APP_GOOGLE_MAPS_API_KEY }} --build-arg REACT_APP_BASE_URL=${{ vars.REACT_APP_BASE_URL }} --build-arg REACT_APP_FRONT_URL=${{ vars.REACT_APP_FRONT_URL }} --build-arg REACT_APP_DOMAIN_URL=${{ vars.REACT_APP_DOMAIN_URL }} --build-arg REACT_APP_DASH_URL=${{ vars.REACT_APP_DASH_URL }} --build-arg GENERATE_SOURCEMAP=${{ vars.GENERATE_SOURCEMAP }} -f Dockerfile .

      # Step 4: Tag and push the Docker image to the registry
      - name: Tag and Push Docker Image
        run: |
          docker tag ${{ vars.REPOSITORY_NAME }}:${{ env.BUILD_NUMBER }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.REPOSITORY_NAME }}:${{ env.BUILD_NUMBER }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.REPOSITORY_NAME }}:${{ env.BUILD_NUMBER }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Step 5: Deploy to EC2 using SSH and Docker Compose
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30s
          command_timeout: 10m
          script: |
            sudo bash -c '
              cd /home/ubuntu/sheelni-devops/develop/${{ vars.REPOSITORY_NAME }} &&
              docker-compose pull ${{ vars.REPOSITORY_NAME }}-develop &&
              docker-compose up -d --no-deps --build ${{ vars.REPOSITORY_NAME }}-develop &&
              docker image prune -f
            '
