name: Deploy to S3 and Invalidate CloudFront

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
     
      AWS_ACCESS_KEY_ID: "AKIARWF5EUNREVKLYS76"
      AWS_SECRET_ACCESS_KEY: "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"
      AWS_REGION: "eu-north-1"
      PROD_S3_BUCKET: "www.tawsilet.com"
      DEV_S3_BUCKET: "tawsilte-webiste-dev"
      PROD_CLOUDFRONT_DISTRIBUTION_ID: "E89P46LA1LDTJ"
      DEV_CLOUDFRONT_DISTRIBUTION_ID: "E2SXK6M9N9ET2A"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set environment variables based on branch
        id: set_env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "S3_BUCKET=${PROD_S3_BUCKET}" >> $GITHUB_ENV
            echo "CLOUDFRONT_DISTRIBUTION_ID=${PROD_CLOUDFRONT_DISTRIBUTION_ID}" >> $GITHUB_ENV
          else
            echo "S3_BUCKET=${DEV_S3_BUCKET}" >> $GITHUB_ENV
            echo "CLOUDFRONT_DISTRIBUTION_ID=${DEV_CLOUDFRONT_DISTRIBUTION_ID}" >> $GITHUB_ENV
          fi

      - name: Prepare environment file based on branch
        run: |
          echo "Current branch: ${GITHUB_REF##*/}"
          echo "Available environment files:"
          ls -la .env*
          
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            if [[ -f ".env.production" ]]; then
              cp .env.production .env
              echo "‚úÖ Using .env.production for main branch"
            else
              echo "‚ùå .env.production file not found!"
              exit 1
            fi
          elif [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            if [[ -f ".env.development" ]]; then
              cp .env.development .env
              echo "‚úÖ Using .env.development for dev branch"
            else
              echo "‚ùå .env.development file not found!"
              exit 1
            fi
          else
            if [[ -f ".env" ]]; then
              echo "‚úÖ Using existing .env file for branch: ${GITHUB_REF##*/}"
            else
              echo "‚ùå No .env file found for branch: ${GITHUB_REF##*/}"
              exit 1
            fi
          fi
          
          echo "Final .env file contents (first 5 lines):"
          head -5 .env

      - name: Verify environment variables
        run: |
          echo "üîç Verifying environment variables..."
          if [[ -f ".env" ]]; then
            echo "‚úÖ .env file exists"
            echo "üìã Environment variables loaded:"
            grep -E "^REACT_APP_" .env | head -10
          else
            echo "‚ùå .env file does not exist!"
            exit 1
          fi

      - name: Set GENERATE_SOURCEMAP environment variable
        run: |
          echo "GENERATE_SOURCEMAP=false" >> $GITHUB_ENV

      - name: Export environment variables from .env file
        run: |
          echo "üì§ Exporting environment variables from .env file..."
          export $(grep -v '^#' .env | xargs)
          echo "REACT_APP_BASE_URL=$REACT_APP_BASE_URL" >> $GITHUB_ENV
          echo "REACT_APP_DOMAIN_URL=$REACT_APP_DOMAIN_URL" >> $GITHUB_ENV
          echo "REACT_APP_FRONT_URL=$REACT_APP_FRONT_URL" >> $GITHUB_ENV
          echo "REACT_APP_DASH_URL=$REACT_APP_DASH_URL" >> $GITHUB_ENV
          echo "REACT_APP_GOOGLE_MAPS_API_KEY=$REACT_APP_GOOGLE_MAPS_API_KEY" >> $GITHUB_ENV
          echo "REACT_APP_PASSWORD=$REACT_APP_PASSWORD" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci --force

      - name: Build app
        run: |
          echo "üî® Building app with environment variables:"
          echo "REACT_APP_BASE_URL: $REACT_APP_BASE_URL"
          echo "REACT_APP_DOMAIN_URL: $REACT_APP_DOMAIN_URL"
          echo "REACT_APP_FRONT_URL: $REACT_APP_FRONT_URL"
          echo "GENERATE_SOURCEMAP: $GENERATE_SOURCEMAP"
          npm run build

      - name: Verify built files contain correct URLs
        run: |
          echo "üîç Verifying built files contain correct environment URLs..."
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "Checking for dev URLs in built files..."
            if grep -r "dev.tawsilet.com" build/; then
              echo "‚úÖ Found dev URLs in built files"
            else
              echo "‚ùå No dev URLs found in built files!"
              exit 1
            fi
            # Check that production URLs are NOT present
            if grep -r "api.tawsilet.com\|tawsilet.com" build/; then
              echo "‚ùå Found production URLs in dev build!"
              exit 1
            else
              echo "‚úÖ No production URLs found in dev build"
            fi
          elif [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "Checking for production URLs in built files..."
            if grep -r "api.tawsilet.com\|tawsilet.com" build/; then
              echo "‚úÖ Found production URLs in built files"
            else
              echo "‚ùå No production URLs found in built files!"
              exit 1
            fi
            # Check that dev URLs are NOT present
            if grep -r "dev.tawsilet.com" build/; then
              echo "‚ùå Found dev URLs in production build!"
              exit 1
            else
              echo "‚úÖ No dev URLs found in production build"
            fi
          fi
          
          echo "üìã Service worker verification:"
          if [[ -f "build/service-worker.js" ]]; then
            echo "Service worker found, checking URLs:"
            grep -o "dev.tawsilet.com\|api.tawsilet.com\|tawsilet.com" build/service-worker.js || echo "No URLs found in service worker"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync build to S3
        run: |
          echo "üöÄ Syncing build to S3 bucket: $S3_BUCKET"
          aws s3 sync build/ s3://$S3_BUCKET/ --delete --cache-control "no-cache, no-store, must-revalidate"
          
          # Force update service worker to clear any cached URLs
          if [[ -f "build/service-worker.js" ]]; then
            echo "üîÑ Forcing service worker update..."
            aws s3 cp build/service-worker.js s3://$S3_BUCKET/service-worker.js --cache-control "no-cache, no-store, must-revalidate"
          fi

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*" 